/**
 * @file   generate_cast_x.cpp
 * @brief  Helper file to generate X-macro def file.
 *
 * Attention: This file is used to generate cast_types.def, which maps
 * ScalarType to ScalarType. This file will not be compiled and run by
 * CMakeLists.txt. Remember to recompile and run this when you change
 * scalar_types.def.
 *
 * @author guanzhichao
 */

#include <fstream>
#include <vector>
using namespace std;  // NOLINT

#define DEF_FILE_BEGIN                                                  \
  "/**                                                              \n" \
  " * @brief #include-style X macros                                \n" \
  " *                                                               \n" \
  " * Note: This file is generated by generate_cast_x.cpp. Please do\n" \
  " * not change this file directly which may cause a sereve error. \n" \
  " *                                                               \n" \
  " * @author guanzhichao                                           \n" \
  " */                                                              \n" \
  "                                                                 \n" \
  "#ifndef CAST_TYPE_MAP                                            \n" \
  "#define CAST_TYPE_MAP(src_ntype, dst_ntype, src_dtype, dst_dtype)\n" \
  "#endif                                                           \n"

#define DEF_FILE_END "#undef CAST_TYPE_MAP"

int main(int argc, char** argv) {
  // get output file. use default if no parameters
  string filename = "cast_types.def";
  if (argc > 1) filename = argv[1];
  fstream s(filename, fstream::out);

  // information of ScalarType declared in scalar_types.def
  vector<pair<string, string>> dtypes;
#define TYPE_MAP_NATIVE_TO_SCALARTYPE(native_type, scalar_type) \
  dtypes.push_back(make_pair(#native_type, #scalar_type));
#include "scalar_types.def"

  // generate file
  s << DEF_FILE_BEGIN << endl;

  for (auto& src : dtypes)
    for (auto& dst : dtypes)
      s << "CAST_TYPE_MAP(" << src.first << ", " << dst.first << ", "
        << src.second << ", " << dst.second << ")\n";

  s << endl << DEF_FILE_END << endl;

  return 0;
}
