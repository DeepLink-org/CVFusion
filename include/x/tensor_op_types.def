/**
 * @brief #include-style X macros
 * @author Jimy
 */

#ifndef TYPE_STRING_TO_TYPE_UNARY
#define TYPE_STRING_TO_TYPE_UNARY(NAME, CLASS)
#endif

#ifndef TYPE_STRING_TO_TYPE_BINARY
#define TYPE_STRING_TO_TYPE_BINARY(NAME, CLASS)
#endif

#ifndef TYPE_STRING_TO_TYPE_LOGICAL
#define TYPE_STRING_TO_TYPE_LOGICAL(NAME, CLASS)
#endif

#ifndef TYPE_STRING_TO_TYPE_DATA
#define TYPE_STRING_TO_TYPE_DATA(NAME, CLASS)
#endif

#ifndef TYPE_STRING_TO_SCALARTYPE
#define TYPE_STRING_TO_SCALARTYPE(NAME, CLASS)
#endif

TYPE_STRING_TO_TYPE_DATA(float, Float32)
TYPE_STRING_TO_TYPE_DATA(double, Float64)
TYPE_STRING_TO_TYPE_DATA(uint8_t, UInt8)
TYPE_STRING_TO_TYPE_DATA(bool, Boolean)
TYPE_STRING_TO_TYPE_DATA(uint64_t, UInt64)
TYPE_STRING_TO_TYPE_DATA(int64_t, Int64)
TYPE_STRING_TO_TYPE_DATA(int, Int32)
TYPE_STRING_TO_TYPE_DATA(char, Int8)

TYPE_STRING_TO_SCALARTYPE(float, Float32)
TYPE_STRING_TO_SCALARTYPE(double, Float64)
TYPE_STRING_TO_SCALARTYPE(bool, Boolean)
TYPE_STRING_TO_SCALARTYPE(uint64_t, UInt64)
TYPE_STRING_TO_SCALARTYPE(int64_t, Int64)
TYPE_STRING_TO_SCALARTYPE(int, Int32)

TYPE_STRING_TO_TYPE_UNARY(abs, Abs)
TYPE_STRING_TO_TYPE_UNARY(exp, Exp)
TYPE_STRING_TO_TYPE_UNARY(expm1, Expm1)
TYPE_STRING_TO_TYPE_UNARY(log, Log)
TYPE_STRING_TO_TYPE_UNARY(log2, Log2)
TYPE_STRING_TO_TYPE_UNARY(log10, Log10)
TYPE_STRING_TO_TYPE_UNARY(log1p, Log1p)
TYPE_STRING_TO_TYPE_UNARY(hasNan, IsNan)
TYPE_STRING_TO_TYPE_UNARY(hasInf, IsInf)
TYPE_STRING_TO_TYPE_UNARY(cround, Cround)
TYPE_STRING_TO_TYPE_UNARY(floor, Floor)
TYPE_STRING_TO_TYPE_UNARY(ceil, Ceil)
TYPE_STRING_TO_TYPE_UNARY(round, Round)
TYPE_STRING_TO_TYPE_UNARY(sqrt, Sqrt)
TYPE_STRING_TO_TYPE_UNARY(rsqrt, Rsqrt)
TYPE_STRING_TO_TYPE_UNARY(atan, Atan)
TYPE_STRING_TO_TYPE_UNARY(tan, Tan)
TYPE_STRING_TO_TYPE_UNARY(acos, Acos)
TYPE_STRING_TO_TYPE_UNARY(asin, Asin)
TYPE_STRING_TO_TYPE_UNARY(cosh, Cosh)
TYPE_STRING_TO_TYPE_UNARY(sinh, Sinh)
TYPE_STRING_TO_TYPE_UNARY(tanh, Tanh)
TYPE_STRING_TO_TYPE_UNARY(acosh, Acosh)
TYPE_STRING_TO_TYPE_UNARY(asinh, Asinh)
TYPE_STRING_TO_TYPE_UNARY(atanh, Atanh)
TYPE_STRING_TO_TYPE_UNARY(sin, Sin)
TYPE_STRING_TO_TYPE_UNARY(cos, Cos)
TYPE_STRING_TO_TYPE_UNARY(sqr, Sqr)
TYPE_STRING_TO_TYPE_UNARY(sigmoid, Sigmoid)
TYPE_STRING_TO_TYPE_UNARY(relu, Relu)
TYPE_STRING_TO_TYPE_UNARY(selu, Selu)
TYPE_STRING_TO_TYPE_UNARY(sign, Sign)
TYPE_STRING_TO_TYPE_UNARY(binot, BitwiseNot)
TYPE_STRING_TO_TYPE_UNARY(not, Not)
TYPE_STRING_TO_TYPE_UNARY(neg, Negate)

TYPE_STRING_TO_TYPE_BINARY(add, Add)
TYPE_STRING_TO_TYPE_BINARY(sub, Sub)
TYPE_STRING_TO_TYPE_BINARY(mul, Mul)
TYPE_STRING_TO_TYPE_BINARY(div, Div)
TYPE_STRING_TO_TYPE_BINARY(min, Min)
TYPE_STRING_TO_TYPE_BINARY(max, Max)
TYPE_STRING_TO_TYPE_BINARY(pow, Pow)
TYPE_STRING_TO_TYPE_BINARY(and, And)
TYPE_STRING_TO_TYPE_BINARY(or, Or)
TYPE_STRING_TO_TYPE_BINARY(xor, Xor)
TYPE_STRING_TO_TYPE_BINARY(mod, Mod)
TYPE_STRING_TO_TYPE_BINARY(sign_mul, SignMul)

TYPE_STRING_TO_TYPE_LOGICAL(lt, LT)
TYPE_STRING_TO_TYPE_LOGICAL(gt, GT)
TYPE_STRING_TO_TYPE_LOGICAL(le, LE)
TYPE_STRING_TO_TYPE_LOGICAL(ge, GE)
TYPE_STRING_TO_TYPE_LOGICAL(eq, EQ)
TYPE_STRING_TO_TYPE_LOGICAL(neq, NE)

#undef TYPE_STRING_TO_TYPE_DATA
#undef TYPE_STRING_TO_SCALARTYPE
#undef TYPE_STRING_TO_TYPE_UNARY
#undef TYPE_STRING_TO_TYPE_BINARY
#undef TYPE_STRING_TO_TYPE_LOGICAL
